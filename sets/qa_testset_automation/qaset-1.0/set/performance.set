#!/bin/bash
# Global eviorment
# ================
# SLE_RELEASE
# Its value should be the test target, for examples SLE11SP3, SLE12.
# It is used for difference between different SLE release.
#
# how to add a new run
# ====================
# each run has five basic components thay are:
#  1. ${run_name}_run   # pointer to the run script 
#  2. ${run_name}_open  ${ARCH} ${SLE_BUILD}  # prepare
#  3. ${run_name}_close ${ARCH} ${SLE_BUILD}  # clean
#  4. ${run_name}_get_args #echo the args. But _run should NOT need args
#  5. ${run_name}_packages #packages array used to run the _run.
#
#  if ${run_name}_run dose no exist,
#  ${run_name}_open or ${run_name}_close fails,
#  or it fails to install needed packages
#  the run can not be called.
#

__import qavm/sq-util.sh

function def_simple_run {
    local name=$1
    local run=$2
    shift 2
    eval "${name}_run=${run}"
    eval "${name}_packages=($@)"
}

def_simple_run siege "/usr/share/qa/tools/test_siege-run" qa_test_siege
function siege_get_args {
    echo performance
}
def_simple_run libmicro_bench "/usr/share/qa/tools/test_libmicro-bench-run" qa_test_libmicro
def_simple_run lmbench_bench "/usr/share/qa/tools/test_lmbench-run" qa_test_lmbench
def_simple_run sysbench_sys "/usr/lib/ctcs2/tools/test_sysbench_sys-run" qa_test_sysbench mysql
def_simple_run netperf_loop4 "/usr/share/qa/tools/netperf_peer_loop-run" qa_test_netperf
def_simple_run netperf_loop6 "/usr/share/qa/tools/netperf_peer_loop-run6" qa_test_netperf
#the fiber tests need two machines. The server parts need to be set mannually.
def_simple_run netperf_fiber4 "/usr/share/qa/tools/netperf-peer-fiber-run" qa_test_netperf
def_simple_run netperf_fiber6 "/usr/share/qa/tools/netperf-peer-fiber-run6" qa_test_netperf

##kernbench a server is need to store the kernel-package
def_simple_run kernbench "/usr/share/qa/tools/test_kernbench-run" qa_test_kernbench
function kernbench_open {
    local _kernel_source=linux-2.6.14
    local _kernel_package=${_kernel_source}.tar.bz2
    local _kernel_package_URL=http://147.2.207.100/kernels/${_kernel_package}
    cd /usr/src
    mv linux linux.sq_orig 2>/dev/null
    if test -f ${_kernel_package} && tar xf ${_kernel_package};then
        sq_debug "[kernbench] The ${_kernel_source} is alreay there."
        mv ${_kernel_source} linux
    else
        wget ${_kernel_package_URL} && tar xf ${_kernel_package}
        sq_debug "[kernbench] Get the ${_kernel_package} from ${_kernel_package_URL}"
        mv ${_kernel_source} linux
    fi

    if test $? -ne 0;then
        return 1
    fi
}
function kernbench_close {
    cd /usr/src
    rm -rf linux 2 > /dev/null
    mv linux.sq_orig linux 2>/dev/null
}

# File system test runs for btrfs, ext3, xfs
SQ_TEST_ALL_FS=(ext3 xfs btrfs)
function sq_abuild_open {
    sq_debug "[abuild] check /etc/fstab for /abuild."
    if test "X${SQ_ABUILD_JUST_DIR}" == "XYES"; then
        sq_debug "[abuild] just use /abuild"
        mkdir /abuild 2>/dev/null
        return 0
    fi

    if test "X${SQ_ABUILD_PARTITION}" != "X";then
        sq_debug "[abuild] predefined SQ_ABUILD_PARTITION ."
        SQ_ABUILD_DEFAULT_FS=""
        #make sure /abuild is there
        test -d /abuild || mkdir /abuild > /dev/null 2>&1
    elif egrep '^[^#].*/abuild' /etc/fstab;then
        sq_debug "[abuild] found a record in /etc/fstab for /abuild."
        SQ_ABUILD_DEFAULT_FS=$(grep '/abuild' /etc/fstab | awk '{print $3}')
        SQ_ABUILD_PARTITION=$(egrep -o '^/dev/.* *\/abuild' /proc/mounts | cut -d" " -f1)
        if test "X${SQ_ABUILD_PARTITION}" == "X";then
            sq_error "[abuild] but currently there is no partition mounted under /abuild"
            return 1
        fi
    else # there is partition default mounted under /abuild
        sq_debug "[abuild] NO record for /abuild in /etc/fstab ."
        SQ_ABUILD_DEFAULT_FS=""
        SQ_ABUILD_PARTITION="/dev/sdb1"
        #make sure /abuild is there
        test -d /abuild || mkdir /abuild > /dev/null 2>&1
    fi
    if test -b ${SQ_ABUILD_PARTITION};then
        sq_info "[abuild] the target partition: ${SQ_ABUILD_PARTITION}"
    else
        sq_error "[abuild] there is no target partition will be used."
        return 2
    fi
}

function sq_abuild_close {
    if test "X${SQ_ABUILD_JUST_DIR}" == "XYES";then
        return 0
    fi
    if test "X${SQ_ABUILD_DEFAULT_FS}" != "X";then
        sq_debug "[abuild] SQ_ABUILD_DEFAULT_FS is ${SQ_ABUILD_DEFAULT_FS}." \
            "[abuild] RESTORE the filesystem to ${SQ_ABUILD_DEFAULT_FS}." \
            "[abuild] then mount ${SQ_ABUILD_PARTITION} /abuild."
        sq_abuild_set_fs ${SQ_ABUILD_DEFAULT_FS}
    fi
}

function sq_abuild_set_fs {
    local _fs_type=$1
    local _fs_options=$2
    local _part
    _part=${SQ_ABUILD_PARTITION}

    if test "X${SQ_ABUILD_JUST_DIR}" == "XYES";then
        return 0
    fi

    if test "X${_part}" == "X";then
        sq_warn "[abuild] trying to mount NODEV /abuild." \
            "Check the system."
        return 1
    fi

    if egrep -o "^${_part}" /proc/mounts;then
        sq_debug "[abuild] ${_part} is already used"
        umount ${_part}
        if test $? -ne 0; then
            sq_error "[abuild] Failed to umount ${_part}." \
                "/abuild is supposed to be free." \
                "There is a BUG!!!"
            return 2
        else
            sq_debug "[abuild] umount ${_part} successfully."
        fi
    fi

    case ${_fs_type} in
        ext3)
            ${SQ_DEBUG_ECHO} /sbin/mkfs.ext3 ${_fs_options} ${_part} > /dev/null;;
        xfs)
            ${SQ_DEBUG_ECHO} /sbin/mkfs.xfs -f ${_fs_options} ${_part} > /dev/null ;;
        btrfs) ${SQ_DEBUG_ECHO} /sbin/mkfs.btrfs -f ${_fs_options} ${_part} > /dev/null ;;
        *) sq_warn "[abuild] ${_fs_type} is not supportted!!!"; true;;
    esac

    if test $? -ne 0; then
        sq_error "[abuild] format ${_part} to ${_fs_type} failed!!!"
        return 3
    else
        sq_info "[abuild] format ${_part} to ${_fs_type} successfully."
    fi

    mount ${_part} /abuild
    if test $? -ne 0; then
        sq_error "[abuild] mount ${_part} /abuild failed!!!"
        return 4
    else
        sq_info "[abuild] mount ${_part} /abuild successfully."
    fi
}

function sq_abuild_general_open {
    sq_abuild_open
    if test $? -ne 0;then
        return 1
    fi
    sq_abuild_set_fs $1
    if test $? -ne 0;then
        sq_abuild_close
        return 2
    fi
}

function sq_abuild_general_close {
    sq_abuild_close
}

function def_unit_fs {
    local name=$1
    local run=$2
    #$3 packages
    local fs
    local code
 
    shift 2
    for fs in ${SQ_TEST_ALL_FS[@]}; do
        eval "${name}_${fs}_run=${run}"
        eval "${name}_${fs}_packages=($@)"
        code="
             function ${name}_${fs}_open {
                 sq_abuild_general_open ${fs};
             }
             "
        eval "${code}"
        code="
             function ${name}_${fs}_close {
                 sq_abuild_general_close;
             }
             "
        eval "${code}"
    done
}

def_unit_fs reaim "/usr/lib/ctcs2/tools/test_reaim-run" qa_test_reaim
def_unit_fs reaim_ioperf "/usr/lib/ctcs2/tools/test_reaim_ioperf-run" qa_test_reaim
def_unit_fs bonnie "/usr/share/qa/tools/test_bonnie-run" qa_test_bonnie
def_unit_fs bonniepp "/usr/share/qa/tools/test_bonnie++-async-run" 'qa_test_bonnie++'
def_unit_fs bonniepp_fsync "/usr/share/qa/tools/test_bonnie++-fsync-run" 'qa_test_bonnie++'
def_unit_fs iozone "/usr/share/qa/tools/test_iozone_new_run" qa_test_iozone
def_unit_fs iozone_bigmem_basic "/usr/share/qa/tools/test_iozone_bigmem_basic-run" qa_test_iozone
def_unit_fs dbench4 "/usr/share/qa/tools/test_dbench-4_0_async-run" qa_test_dbench-4_0
def_unit_fs dbench4_fsync "/usr/share/qa/tools/test_dbench-4_0_fsync-run" qa_test_dbench-4_0
def_unit_fs dbench4_osync "/usr/share/qa/tools/test_dbench-4_0_osync-run" qa_test_dbench-4_0
dbench4_nfs_run="/usr/share/qa/tools/test_dbench-4_0-nfs-run"
dbench4_nfs_packages=(qa_test_dbench-4_0)
dbench4_nfs4_run="/usr/share/qa/tools/test_dbench-4_0-nfs4-run"
dbench4_nfs4_packages=(qa_test_dbench-4_0)
def_unit_fs tiobench_basic "/usr/lib/ctcs2/tools/test_tiobench_basic-run" qa_test_tiobench
def_unit_fs pgbench "/usr/share/qa/tools/simple-pgbench-run" qa_test_pgbench
def_unit_fs pgbench_small  "/usr/share/qa/tools/test_pgbench_small-run" qa_test_pgbench
def_unit_fs pgbench_medium  "/usr/share/qa/tools/test_pgbench_medium-run" qa_test_pgbench
def_unit_fs pgbench_large  "/usr/share/qa/tools/test_pgbench_large-run" qa_test_pgbench
def_unit_fs sysbench_oltp "/usr/lib/ctcs2/tools/test_sysbench_oltp-run" qa_test_sysbench mysql

