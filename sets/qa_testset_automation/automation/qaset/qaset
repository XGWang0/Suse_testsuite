#!/bin/bash

QASET_ROOT=/usr/share/qa/qaset
__IMPORT_ROOT=${QASET_ROOT}

SQ_TEST_INVOKE_DIR=$(pwd)
SQ_TEST_INVOKE_NAME=$0

if test -z ${__IMPORT_ROOT}; then
    CMDPATH=$(which $0)
    pushd $(dirname $CMDPATH) > /dev/null
    readonly __IMPORT_ROOT=$(pwd)
    popd > /dev/null
fi

source ${__IMPORT_ROOT}/qavm/import.sh

__import qavm/sq-util.sh
__import qavm/sq-mach.sh
__import qavm/sq-global.sh

if test $UID -ne 0;then
    sq_error "I need root permission!!!"
    exit 1
fi

if test $# -lt 1;then
    usage
fi

if test "X${SQ_SET_CALL_BY_WRAP}" == "XYES";then
    SQ_SET_ARGV="$@"
fi

sq_global_init
sq_info "[GLOBAL] Start at $(date)"
sq_info "[GLOBAL] /proc/uptime: $(cat /proc/uptime)"

# program initialization
function usage {
    echo "Usage $0 [-t RELEASE] subcmd [OPTIONS]"
    exit 1
}

sq_os_get_sysinfo

function sq_tenv_collection {
	#collect system info that these info might be overwrite by user configure file
	export _QASET_SWAP_SIZE=$(free -m | grep "^Swap"| awk -F " " '{print $2}')
	export _QASET_ARCH=$(uname -m)
    #product.pl is prvoide by qa_lib_perl package
	build_release=$(/usr/share/qa/tools/product.pl 2>/dev/null)
	export _QASET_RELEASE=$(echo ${build_release} | awk -F '-' '{print $1"-"$2"-"$3}')
	export _QASET_BUILD=$(echo ${build_release} |awk -F '-' '{print $4}')
	export _QASET_ROOTFS_SIZE=$(df / -m | tail -n 1 | awk '{print $2}')
	export _QASET_ROOTFS_TYPE=$(cat /proc/mounts | awk '{if ($2 == "/" && $1 != "rootfs") print $3}')
	export _QASET_KERNEL=$(uname -r)
	export _QASET_HOSTNAME=$(_get_hostname)

	# read user configuration
	if test -f ${SQ_USER_CONFIG_FILE};then
	    source ${SQ_USER_CONFIG_FILE}
	    for v in `declare | grep "^_QASET" | awk -F '=' '{print $1}'`; do export $v; done
	fi
}

function sq_set_cmd_run_parse {
    local _opt
    while test $# -gt 0;do
        _opt=$1
        shift
        case $_opt in
            '-s')
                if test $# -gt 0;then
                    SQ_TEST_RUN_SET=$1
                    shift
                else
                    usage
                fi
                ;;
             *)
                usage;;
        esac
    done
    if test "X${SQ_TEST_RUN_LIST_FILE}" == "X";then
        # use the same name as the release
        SQ_TEST_RUN_LIST_FILE=${SLE_RELEASE}
    fi
    if test "X${SQ_TEST_RUN_SET}" == "X";then
        sq_error "[CMDLINE] SQ_TEST_RUN_SET is not set"
        usage
    fi
}

function sq_set_cmd_run_list {
    local dsuf
    sq_qadb_load_run_id
    if sq_qadb_is_empty_run_id; then
        sq_qadb_gen_run_id
    fi
    if test "X${SQ_SET_CALL_BY_WRAP}" == "XYES";then
        export SQ_SET_CALL_BY_WRAP=NO
        cd ${SQ_TEST_CALL_DIR}
        dsuf=$(date +%m%dT%H%M)
        echo "logfile %t-${SQ_TEST_RUN_ID}-${dsuf}.screenlog" > screenrc
        exec screen -L -S ${SQ_TEST_RUN_LIST_FILE}-${SQ_TEST_RUN_SET} \
            -t ${SQ_TEST_RUN_LIST_FILE}-${SQ_TEST_RUN_SET} -c screenrc -d -m \
            ${SQ_TEST_INVOKE_NAME} ${SQ_SET_ARGV}
    else
        sq_mach_run
    fi
}

function sq_set_cmd_reset {
    rm -f ${SQ_TEST_CONTROL_FILE_STOP} 1> /dev/null 2>&1
    rm -f ${SQ_TEST_CONTROL_FILE_DONE} 1> /dev/null 2>&1
    rm -f ${SQ_TEST_CONTROL_FILE_SYSTEM_DIRTY} 1> /dev/null 2>&1
    rmdir ${SQ_TEST_RUN_LOCK} 1>/dev/null 2>&1
    echo > ${SQ_TEST_CONTROL_FILE_NEXT_RUN}
}

function sq_set_cmd_prepo_parse {
    local _opt
    while test $# -gt 0;do
        _opt=$1
        shift
        case $_opt in
            -*)
                usage;;
            *)
                usage;;
        esac
    done
}

function sq_set_cmd_prepo {
    sq_mach_open
}

function sq_set_cmd_stop_list {
    echo > ${SQ_TEST_CONTROL_FILE_STOP}
    rmdir ${SQ_TEST_RUN_LOCK}
}

function sq_set_cmd_resume_list {    
    rm -f ${SQ_TEST_CONTROL_FILE_STOP} 1> /dev/null 2>&1
    sq_warn "RESUME not finished!!!" \
        "Only delete STOP file" \
        "You need manually run the list again!!!"
}

# global_cmd_parse
while test $# -gt 0;do
    _opt=$1
    case $_opt in
        '-t') #target SLE_RELEASE
            shift
            if test $# -gt 0;then
                SLE_RELEASE=$1
                shift
            else
                usage
            fi
            ;;
        -*)
            sq_error "[CMDLINE] unkown global option ${_opt}"
            usage;;
        *) # sub command and its options
            break #the while
    esac
done
unset _opt

case $1 in
    tenv)
        sq_tenv_collection
        env | grep "^_QASET"
        exit 0
        ;;
    run*) shift
        if test "X${SLE_RELEASE}" == "X";then
            sq_error "[CMDLINE] SLE_RELEASE is not set"
            usage
        fi
	
	sq_tenv_collection	

        sq_set_cmd_run_parse "$@"
        sq_set_cmd_run_list
        ;;
    reset*) shift; sq_set_cmd_reset
        ;;
    prepo*)
        if test "X${SLE_RELEASE}" == "X";then
            sq_error "[CMDLINE] SLE_RELEASE is not set"
            usage
        fi
        shift
        sq_set_cmd_prepo_parse "$@"
        sq_set_cmd_prepo
        ;;
    stop*)
        shift; sq_set_cmd_stop_list
        ;;
    resume*)
        shift; sq_set_cmd_resume_list
        ;;
    *)
        sq_error "[CMDLINE] unknow subcmd ${1}"
        usage
        ;;
esac
