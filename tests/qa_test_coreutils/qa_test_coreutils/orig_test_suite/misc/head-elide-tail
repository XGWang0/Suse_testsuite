#!/bin/sh
# ****************************************************************************
# Copyright Â© 2011 Unpublished Work of SUSE, Inc. All Rights Reserved.
# 
# THIS IS AN UNPUBLISHED WORK OF SUSE, INC.  IT CONTAINS SUSE'S
# CONFIDENTIAL, PROPRIETARY, AND TRADE SECRET INFORMATION.  SUSE
# RESTRICTS THIS WORK TO SUSE EMPLOYEES WHO NEED THE WORK TO PERFORM
# THEIR ASSIGNMENTS AND TO THIRD PARTIES AUTHORIZED BY SUSE IN WRITING.
# THIS WORK IS SUBJECT TO U.S. AND INTERNATIONAL COPYRIGHT LAWS AND
# TREATIES. IT MAY NOT BE USED, COPIED, DISTRIBUTED, DISCLOSED, ADAPTED,
# PERFORMED, DISPLAYED, COLLECTED, COMPILED, OR LINKED WITHOUT SUSE'S
# PRIOR WRITTEN CONSENT. USE OR EXPLOITATION OF THIS WORK WITHOUT
# AUTHORIZATION COULD SUBJECT THE PERPETRATOR TO CRIMINAL AND  CIVIL
# LIABILITY.
# 
# SUSE PROVIDES THE WORK 'AS IS,' WITHOUT ANY EXPRESS OR IMPLIED
# WARRANTY, INCLUDING WITHOUT THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT. SUSE, THE
# AUTHORS OF THE WORK, AND THE OWNERS OF COPYRIGHT IN THE WORK ARE NOT
# LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR IN CONNECTION
# WITH THE WORK OR THE USE OR OTHER DEALINGS IN THE WORK.
# ****************************************************************************

# -*- perl -*-
# Exercise head's --bytes=-N option.

: ${PERL=perl}
: ${srcdir=.}

$PERL -e 1 > /dev/null 2>&1 || {
  echo 1>&2 "$0: configure didn't find a usable version of Perl," \
    "so can't run this test"
  exit 77
}

exec $PERL -w -I$srcdir/.. -MCoreutils -- - <<\EOF
#/
require 5.003;
use strict;

(my $program_name = $0) =~ s|.*/||;

$ENV{PROG} = 'head';

# Turn off localization of executable's ouput.
@ENV{qw(LANGUAGE LANG LC_ALL)} = ('C') x 3;

# This should match the definition in head.c.
my $READ_BUFSIZE = 4096;

my @Tests =
  (
   # Elide the exact size of the file.
   ['elide-b1', "--bytes=-2", {IN=>"a\n"}, {OUT=>''}],
   # Elide more than the size of the file.
   ['elide-b2', "--bytes=-2", {IN=>"a"},   {OUT=>''}],
   # Leave just one byte.
   ['elide-b3', "--bytes=-2", {IN=>"abc"}, {OUT=>'a'}],
   # Make it so the elided bytes straddle the end of the first
   # $READ_BUFSIZE block.
   ['elide-b4', "--bytes=-2",
    {IN=> 'a' x ($READ_BUFSIZE-3) . "\nbcd"},
    {OUT=>'a' x ($READ_BUFSIZE-3) . "\nb"}],
   # Make it so the elided bytes straddle the end of the 2nd
   # $READ_BUFSIZE block.
   ['elide-b5', "--bytes=-2",
    {IN=> 'a' x (2 * $READ_BUFSIZE - 2) . 'bcd'},
    {OUT=>'a' x (2 * $READ_BUFSIZE - 2) . 'b'}],

   ['elide-l0', "--lines=-1", {IN=>''}, {OUT=>''}],
   ['elide-l1', "--lines=-1", {IN=>"a\n"}, {OUT=>''}],
   ['elide-l2', "--lines=-1", {IN=>"a"}, {OUT=>''}],
   ['elide-l3', "--lines=-1", {IN=>"a\nb"}, {OUT=>"a\n"}],
   ['elide-l4', "--lines=-1", {IN=>"a\nb\n"}, {OUT=>"a\n"}],
  );
# Expnsive tests are no longer stand. Comment them out
#if ($ENV{RUN_EXPENSIVE_TESTS})
#  {
#    # Brute force: use all combinations of file sizes [0..20] and
#    # number of bytes to elide [0..20].  For better coverage, recompile
#    # head with -DHEAD_TAIL_PIPE_READ_BUFSIZE=4 and
#    # -DHEAD_TAIL_PIPE_BYTECOUNT_THRESHOLD=8
#    my $s = "abcdefghijklmnopqrst";
#    for my $file_size (0..20)
#      {
#	for my $n_elide (0..20)
#	  {
#	    my $input = substr $s, 0, $file_size;
#	    my $out_len = $n_elide < $file_size ? $file_size - $n_elide : 0;
#	    my $output = substr $input, 0, $out_len;
#	    my $t = ["elideb$file_size-$n_elide", "--bytes=-$n_elide",
#		     {IN=>$input}, {OUT=>$output}];
#	    push @Tests, $t;
#	    my @u = @$t;
#	    # Insert the --presume-input-pipe option.
#	    $u[0] .= 'p';
#	    $u[1] .= ' --presume-input-pipe';
#	    push @Tests, \@u;
#	  }
#      }
#
#    $s =~ s/(.)/$1\n/g;
#    for my $file_size (0..20)
#      {
#	for my $n_elide (0..20)
#	  {
#	    my $input = substr $s, 0, 2 * $file_size;
#	    my $out_len = $n_elide < $file_size ? $file_size - $n_elide : 0;
#	    my $output = substr $input, 0, 2 * $out_len;
#	    my $t = ["elidel$file_size-$n_elide", "--lines=-$n_elide",
#		     {IN=>$input}, {OUT=>$output}];
#	    push @Tests, $t;
#	    my @u = @$t;
#	    # Insert the --presume-input-pipe option.
#	    $u[0] .= 'p';
#	    $u[1] .= ' --presume-input-pipe';
#	    push @Tests, \@u;
#	  }
#      }
#  }
#
my $save_temps = $ENV{DEBUG};
my $verbose = $ENV{VERBOSE};

my $prog = $ENV{PROG} || die "$0: \$PROG not specified in environment\n";
my $fail = run_tests ($program_name, $prog, \@Tests, $save_temps, $verbose);
exit $fail;
EOF

