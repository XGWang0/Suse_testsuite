#!/bin/sh
# ****************************************************************************
# Copyright Â© 2011 Unpublished Work of SUSE, Inc. All Rights Reserved.
# 
# THIS IS AN UNPUBLISHED WORK OF SUSE, INC.  IT CONTAINS SUSE'S
# CONFIDENTIAL, PROPRIETARY, AND TRADE SECRET INFORMATION.  SUSE
# RESTRICTS THIS WORK TO SUSE EMPLOYEES WHO NEED THE WORK TO PERFORM
# THEIR ASSIGNMENTS AND TO THIRD PARTIES AUTHORIZED BY SUSE IN WRITING.
# THIS WORK IS SUBJECT TO U.S. AND INTERNATIONAL COPYRIGHT LAWS AND
# TREATIES. IT MAY NOT BE USED, COPIED, DISTRIBUTED, DISCLOSED, ADAPTED,
# PERFORMED, DISPLAYED, COLLECTED, COMPILED, OR LINKED WITHOUT SUSE'S
# PRIOR WRITTEN CONSENT. USE OR EXPLOITATION OF THIS WORK WITHOUT
# AUTHORIZATION COULD SUBJECT THE PERPETRATOR TO CRIMINAL AND  CIVIL
# LIABILITY.
# 
# SUSE PROVIDES THE WORK 'AS IS,' WITHOUT ANY EXPRESS OR IMPLIED
# WARRANTY, INCLUDING WITHOUT THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT. SUSE, THE
# AUTHORS OF THE WORK, AND THE OWNERS OF COPYRIGHT IN THE WORK ARE NOT
# LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR IN CONNECTION
# WITH THE WORK OR THE USE OR OTHER DEALINGS IN THE WORK.
# ****************************************************************************

# -*-perl-*-

: ${PERL=perl}
: ${srcdir=.}

$PERL -e 1 > /dev/null 2>&1 || {
  echo 1>&2 "$0: configure didn't find a usable version of Perl," \
    "so can't run this test"
  exit 77
}

d=$srcdir/..
exec $PERL -w -I$d -MCoreutils -- - << \EOF
require 5.003;
use strict;

(my $program_name = $0) =~ s|.*/||;

# Turn off localisation of executable's ouput.
@ENV{qw(LANGUAGE LANG LC_ALL)} = ('C') x 3;

my $prog = $ENV{PROG} || die "$0: \$PROG not specified in environment\n";

my @Tests =
    (
     ['fail-1', {ERR => "$prog: missing operand\n"
       . "Try `$prog --help' for more information.\n"}, {EXIT => '1'}],
     ['fail-2', qw(a b c), {ERR => "$prog: extra operand `c'\n"
       . "Try `$prog --help' for more information.\n"}, {EXIT => '1'}],

     ['a', qw(d/f),        {OUT => 'f'}],
     ['b', qw(/d/f),       {OUT => 'f'}],
     ['c', qw(d/f/),       {OUT => 'f'}],
     ['d', qw(d/f//),      {OUT => 'f'}],
     ['e', qw(f),          {OUT => 'f'}],
     ['f', qw(/),          {OUT => '/'}],
     ['g', qw(//),         {OUT => '/'}],
     ['h', qw(///),        {OUT => '/'}],
     ['i', qw(///a///),    {OUT => 'a'}],
     ['1', qw(f.s .s),     {OUT => 'f'}],
     ['2', qw(fs s),       {OUT => 'f'}],
     ['3', qw(fs fs),      {OUT => 'fs'}],
     ['4', qw(fs fs),      {OUT => 'fs'}],
     ['5', qw(dir/file.suf .suf),      {OUT => 'file'}],
    );

# Append a newline to end of each expected `OUT' string.
my $t;
foreach $t (@Tests)
  {
    my $arg1 = $t->[1];
    my $e;
    foreach $e (@$t)
      {
	$e->{OUT} = "$e->{OUT}\n"
	  if ref $e eq 'HASH' and exists $e->{OUT};
      }
  }

my $save_temps = $ENV{SAVE_TEMPS};
my $verbose = $ENV{VERBOSE};

my $fail = run_tests ($program_name, $prog, \@Tests, $save_temps, $verbose);
exit $fail;
EOF

