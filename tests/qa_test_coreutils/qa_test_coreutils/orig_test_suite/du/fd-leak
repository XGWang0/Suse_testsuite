#!/bin/sh

# check for file descriptor leak
DEBUGME='no'
if [ "$VERBOSE" = yes -a "$DEBUGME" = "yes" ]; then
  set -x
  du --version
fi

# Call this an expensive test.  It's not that expensive, but command line
# limitations might induce failure on some losing systems.
. $srcdir/../expensive

pwd=`pwd`
t0=`echo "$0"|sed 's,.*/,,'`.tmp; tmp=$t0/$$
trap 'status=$?; cd $pwd; chmod -R u+rwx $t0; rm -rf $t0 && exit $status' 0
trap '(exit $?); exit $?' 1 2 13 15

framework_failure=0
mkdir -p $tmp || framework_failure=1
cd $tmp || framework_failure=1
# Create 1296 (36^2) files.
# Their names and separating spaces take up 3887 bytes.
x='a b c d e f g h i j k l m n o p q r s t u v w x y z 0 1 2 3 4 5 6 7 8 9'
f=
for i in $x; do
  for j in $x; do
    f="$f $i$j"
  done
done
echo "============================================================================"
echo "|   Trying touch all files named by alpha-numeric combination as follows   |"
echo "============================================================================"
j=0
for i in $f; do
  echo -n "$i "
  j=$(($j + 1))
  if [ `expr $j % 36` -eq 0 ]; then
	echo "";
  fi
done

# This may fail due to command line limitations.
touch $f || framework_failure=1

if test $framework_failure = 1; then
  echo "$0: failure in testing framework" 1>&2
  (exit 1); exit 1
else
  echo "===> Touch all files succeed! <==="
fi

fail=0

# With coreutils-5.0, this would fail due to a file descriptor leak.
du $f > out || fail=1
if [ $fail = 1 ]; then
	echo "$0: Failure in du command"
fi
(exit $fail); exit $fail


