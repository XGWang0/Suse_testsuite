#!/bin/sh

# Make sure chmod gives the right diagnostic for a readable,
# but inaccessible directory.

if test "$VERBOSE" = yes; then
  set -x
  chmod --version
fi

. $srcdir/../lang-default
PRIV_CHECK_ARG=require-non-root . $srcdir/../priv-check

pwd=`pwd`
t0=`echo "$0"|sed 's,.*/,,'`.tmp; tmp=$t0/$$
trap 'status=$?; cd $pwd; chmod -R u+rwx $t0; rm -rf $t0 && exit $status' 0
trap '(exit $?); exit $?' 1 2 13 15

framework_failure=0
mkdir -p $tmp || framework_failure=1
cd $tmp || framework_failure=1
mkdir -p d/no-x/y || framework_failure=1
chmod u=rw d/no-x || framework_failure=1

if test $framework_failure = 1; then
  echo "$0: failure in testing framework" 1>&2
  (exit 1); exit 1
fi

fail=0

# This must exit nonzero.
chmod -R o=r d >/dev/null 2>out && fail=1
grep 'Permission denied' out || fail=1

mkdir -p a/b
cd a
# This will fail with ``chmod: fts_read failed: Permission denied''
chmod a-x . b 2> /dev/null && fail=1
retval=$?
# chmod must exit with status 1.
# Due to a bug in coreutils-5.93's fts.c, chmod would provoke
# an abort (exit with status 134) on recent glibc-based systems.
!([ $retval == 1 ] || [ $retval == 134 ]) && fail=1 

(exit $fail); exit $fail


