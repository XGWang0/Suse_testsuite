#!/bin/bash
#
#
#
#
set +x
exitcode=11 #  (= internal error in ctcs2) 

# tbench test constants
timellimit=600             # seconds
tbench_bin=tbench-4_0
# find an usable working directory
for A in /abuild/tbench /abuild /tmp
do
	if [ -d $A ]
	then
		default_workdir=$A
		break
	fi
done

eth=`ip route | grep default | awk '{print $5}'`
if [ -n $eth ]
then 
    localip=`/sbin/ifconfig $eth  | sed -n '/inet addr:/ s/inet addr://pg' | awk -F" " '{print $1}'`
    #localip=`traceroute -m 1 google.com | grep '^ 1' | awk '{print $2}'`
else
    echo "Can't find eth"
fi 

#  ============   START  aux functions  ==============
#

function usage() {
        echo "
Usage:   $0 [-h] [-D workdir] [-S sync dir] [-s use osync]
        	 [-t timelimits] [-T tcp-options] [-F fsync] [-v]

            to run the \"tbench-4_0\" Benchmark on this host
            and to create a nice log.

Options:
         -D   Specify the working directory (and thus, implicitly,
              the device) for tbench (default: $default_workdir)
         -h   Print this help text and exit successfully
         -S   Sync directory
         -s   Use osync
         -t   timelimit (default: $timellimit) seconds.
         -v   be verbose (currently a no-op)
"    
	return 0
}


invoked_tidy_up=""
function tidy_up() {

        if [ -z "$invoked_tidy_up" ]
	then
		# Guard against re-entrancy -- yes, it may cause a race
		invoked_tidy_up="yes"
		echo "$(date): Caught signal; waiting 15s for tbench-4_0 childs..."
		sleep 15
		echo "                              Overall runtime: $SECONDS seconds."
		# This should be unnecessary: tbench itself will
		# remove $workdir upon termination...
		#
		# echo "Backgrounding removal of $workdir and terminating..."
		# rm -rf "$workdir" &
		popd  >/dev/null 2>&1
		exit "$exitcode"
	fi  # $invoked_tidy_up
}
#
#  ============    END   aux functions  ==============

# Runtime measurement
SECONDS=0

trap tidy_up 1 2 3 15

timestamp="$(date '+%y%m%d.%H%M%S')"
basename=tbench-"${timestamp}"
workdir="$default_workdir"
tbench_opts=""

# usage: tbench [OPTIONS] nprocs
# options:
#   -v               show version
#   -t timelimit     run time in seconds (default 600)
#   -D directory     base directory to run in
#   -c loadfile      set location of the loadfile
#   -s               synchronous file IO
#   -S               synchronous directories (mkdir, unlink...)
#   -x               enable EA support
#   -T options       set socket options for tbench

#   =====   Evaluate and check the commandline  =========
#                                                       #
while getopts hD:n:o:t:v:R:F optchar ; do

    case "$optchar" in

      h)      usage
              exit 0                                 ;;
      D)      workdir=$OPTARG                        ;;
      S)      tbench_opts="$tbench_opts $OPTARG"     ;;
      s)      tbench_opts="$tbench_opts $OPTARG"     ;;
      t)      timelimit=$OPTARG                      ;;
      F)      tbench_opts="$tbench_opts $OPTARG"     ;;
      T)      tcp_options=$OPTARG                    ;; 
      *)      usage
              exit "$exitcode" ;; 
    esac
done
shift $((OPTIND - 1))
#                                                       #
#   ====  END: Evaluate and check the commandline  ======


#   ====  Preparation: Create the working directory =====
#
# Make the path absolute
[ "$workdir" = "${workdir#/}" ] && workdir="${PWD}"/"$workdir"
if  [ -e "$workdir" ] 
then
    [ -d "$workdir" ]      || {
	echo "\$workdir: ${workdir} is not a directory. Aborting..."
	exit "$exitcode"
	}
else
    "$MKDIR" -p "$workdir" || {
         echo "Could not create working directory $workdir. Aborting..."
	kill $$  # invokes tidy_up
	}
fi

[ -r "$workdir" -a -w "$workdir" -a -x "$workdir" ]  || {
	echo "\
prepare_workdir: Working directory $workdir:
Needed access rights rwx not all set. Aborting..."
	kill $$  # invokes tidy_up
	}

wtestfile="${workdir}/prepare_workdir.$$.$$"
echo "$wtestfile" > "$wtestfile" ; rm "$wtestfile" || {
     echo "\
Working directory $workdir:
Cannot create or remove files there (maybe filesystem full or read-only?)
Aborting..."
	kill $$  # invokes tidy_up
	}

#   ====  Preparation: Check disk space below $workdir, =
#                      abort in case of shortage                     
#
minfree="$((diskspace_per_client * number_clients))"  # MByte
freespace="$(df -m "$workdir" | awk '/^\//{ print $4 }')"
# if empty, need to consult next line.
[ -n "$freespace" ] || freespace="$(df "$workdir" |\
    awk '/^\/dev/{ getline ; print $3 }')" 
if [ "$?" -ne 0 -o -z "$freespace" ]
then
	echo "\
Unable to determine free space (needed: $minfree MByte)
available under $workdir . Non-local filesystem, maybe?
Aborting..." 
	kill $$  # invokes tidy_up
fi
if [ "$freespace" -lt "$minfree" ]
then
	echo "\
\"df\" shows less than the needed $minfree MByte
available under $workdir . Aborting..."
	kill $$  # invokes tidy_up
fi

#
#   ====  END Preparation ===============================


# Now DO IT.
# Script will be terminated by signal, as I don't know
# about how/whether tbench will terminate by itself.
#
exitcode=0
echo "$(date): Launching command:
tbench  $tbench_opts -t $timelimit  $localip 
Working directory and device:
$(df $workdir)
"
"$tbench_bin"  $tbench_opts -t "$timelimit" -D "$workdir" $localip
# wtf "$number_clients"
# This code is reached only if tbench runs to termination rather
# than gets signalled
exitcode="$?"

#sleep $timelimit
echo "kill"
for pid in $(pidof "/usr/bin/tbench_srv-4_0");do
    kill -9 $pid
done
echo "tbench run completed; SIGTERMing myself for tidyup..."
kill $$


