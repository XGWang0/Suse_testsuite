--- libhugetlbfs-2.17/tests/misalign.c	2015-08-06 14:59:46.761132472 +0800
+++ misalign.c				2015-08-06 16:11:55.303816386 +0800
@@ -23,6 +23,7 @@
 #include <errno.h>
 #include <signal.h>
 #include <sys/mman.h>
+#include <sys/utsname.h>
 
 #include <hugetlbfs.h>
 
@@ -47,9 +48,13 @@
 	int fd;
 	void *p, *q;
 	int err;
+	struct utsname buf;
 
 	test_init(argc, argv);
 
+	if (uname(&buf) != 0)
+		FAIL("uname failed %s", strerror(errno));
+
 	page_size = getpagesize();
 	hpage_size = check_hugepagesize();
 
@@ -92,16 +97,28 @@
 
 	/* 3) Try a misaligned length */
 	q = mmap(NULL, page_size, PROT_READ|PROT_WRITE, MAP_PRIVATE, fd, 0);
-	if (q != MAP_FAILED)
-		FAIL("mmap() with misaligned length 0x%lx succeeded",
-		     page_size);
+	if (test_compare_kver(buf.release, "3.10.0") < 0) {
+		if (q != MAP_FAILED)
+			FAIL("mmap() with misaligned length 0x%lx succeeded",
+		     		page_size);
+	} else {
+		if (q == MAP_FAILED)
+			FAIL("mmap() with misaligned length 0x%lx failed",
+                                page_size);
+	}
 
 	/* 4) Try a misaligned length with MAP_FIXED */
 	q = mmap(p, page_size, PROT_READ|PROT_WRITE,
 		 MAP_PRIVATE|MAP_FIXED, fd, 0);
-	if (q != MAP_FAILED)
-		FAIL("mmap() MAP_FIXED with misaligned length 0x%lx succeeded",
-		     page_size);
+	if (test_compare_kver(buf.release, "3.10.0") < 0) {
+		if (q != MAP_FAILED)
+			FAIL("mmap() MAP_FIXED with misaligned length 0x%lx succeeded",
+			     page_size);
+	} else {
+                if (q == MAP_FAILED)
+                        FAIL("mmap() MAP_FIXED with misaligned length 0x%lx "
+                                "failed", page_size);
+	}
 
 	/* 5) Try a misaligned offset */
 	q = mmap(NULL, hpage_size, PROT_READ|PROT_WRITE,
