#!/bin/bash
# ****************************************************************************
# Copyright (c) 2011-2012 Unpublished Work of SUSE. All Rights Reserved.
# 
# THIS IS AN UNPUBLISHED WORK OF SUSE.  IT CONTAINS SUSE'S
# CONFIDENTIAL, PROPRIETARY, AND TRADE SECRET INFORMATION.  SUSE
# RESTRICTS THIS WORK TO SUSE EMPLOYEES WHO NEED THE WORK TO PERFORM
# THEIR ASSIGNMENTS AND TO THIRD PARTIES AUTHORIZED BY SUSE IN WRITING.
# THIS WORK IS SUBJECT TO U.S. AND INTERNATIONAL COPYRIGHT LAWS AND
# TREATIES. IT MAY NOT BE USED, COPIED, DISTRIBUTED, DISCLOSED, ADAPTED,
# PERFORMED, DISPLAYED, COLLECTED, COMPILED, OR LINKED WITHOUT SUSE'S
# PRIOR WRITTEN CONSENT. USE OR EXPLOITATION OF THIS WORK WITHOUT
# AUTHORIZATION COULD SUBJECT THE PERPETRATOR TO CRIMINAL AND  CIVIL
# LIABILITY.
# 
# SUSE PROVIDES THE WORK 'AS IS,' WITHOUT ANY EXPRESS OR IMPLIED
# WARRANTY, INCLUDING WITHOUT THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT. SUSE, THE
# AUTHORS OF THE WORK, AND THE OWNERS OF COPYRIGHT IN THE WORK ARE NOT
# LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR IN CONNECTION
# WITH THE WORK OR THE USE OR OTHER DEALINGS IN THE WORK.
# ****************************************************************************
#

LSB_DIR=/usr/share/qa/qa_test_lsb

#############################################################################
# Checking for essential utilities
#############################################################################

WGET=`which wget`
if [ -z "$WGET" ] ; then
	echo "Error: 'wget' utility not found"
	exit 1
fi

RPM=`which rpm`
if [ -z "$RPM" ] ; then
	echo "Error: 'rpm' utility not found (is this a RPM-based distro?)"
	exit 1
fi

which "uname" >/dev/null 2>&1
if [ "$?" -ne "0" ] ; then
	echo "Error: 'uname' utility not found"
	exit 1
fi

which "lsb_release" >/dev/null 2>&1
if [ "$?" -ne "0" ] ; then
	echo "Error: 'lsb_release' utility not found"
	echo "(you may need to explicitly install the 'lsb' package)"
	exit 1
fi

#############################################################################
# Overridable parameters
#############################################################################

# Which version of LSB we want to run tests for.
# Reasonable options are currently 4.0, 4.1.
if [ -z "$LSB_VERSION" ] ; then
	LSB_VERSION="4.0"
fi
echo "LSB version to test against: $LSB_VERSION"

# Directory for downloaded packages.
if [ -z "$LOCAL_PKG_DIR" ] ; then
	LOCAL_PKG_DIR="/var/tmp/lsbtest-rpms"
fi
echo "Locally stored packages are in: $LOCAL_PKG_DIR"

# List of tests to run. By default, almost all tests are run.
#
# Use "/opt/lsb/test/manager/utils/dist-checker.pl --list" to get a list
# of all possible tests. "all" runs all tests.
#
if [ -z "$TEST_LIST" ] ; then
	TEST_LIST="cmdchk libchk libstdcpp cpp-t2c tcl expect python perl core xts5 desktop desktop-t2c xts5 qt3-azov qt4-azov olver"
fi
echo "Tests to be run: $TEST_LIST"

#############################################################################
# Detecting platform information
#############################################################################

echo -n "Checking architecture... "
ARCH=`uname -m`

# To make things more interesting, LSB repos use different arch names
# than the official ones, and yet different extensions for RPMs.
if [ "$ARCH" == "x86" ] || [ "$ARCH" == "i686" ]; then
	LSB_ARCH="ia32"
	RPMEXT="i486.rpm"
elif [ "$ARCH" == "x86_64" ] ; then
	LSB_ARCH="x86_64"
	RPMEXT="x86_64.rpm"
elif [ "$ARCH" == "ppc" ] ; then
	LSB_ARCH="ppc32"
	RPMEXT="ppc.rpm"
elif [ "$ARCH" == "ppc64" ] ; then
	LSB_ARCH="ppc64"
	RPMEXT="ppc64.rpm"
elif [ "$ARCH" == "ia64" ] ; then
	LSB_ARCH="ia64"
	RPMEXT="ia64.rpm"
elif [ "$ARCH" == "s390" ] ; then
	LSB_ARCH="s390"
	RPMEXT="s390.rpm"
elif [ "$ARCH" == "s390x" ] ; then
	LSB_ARCH="s390x"
	RPMEXT="s390x.rpm"
else
	echo "$ARCH"
	echo
	echo "Error: unrecognized architecture '$ARCH'."
	exit 1
fi

echo "$ARCH (using '$LSB_ARCH' for repo, '$RPMEXT' for RPMs)"

echo -n "Checking reported LSB version (lsb_release)... "
REPORTED_LSB_VERSION=`lsb_release -v -s`
echo $REPORTED_LSB_VERSION
echo "$REPORTED_LSB_VERSION" | grep "$LSB_VERSION" >/dev/null 2>&1
if [ "$?" -ne "0" ] ; then
	echo
	echo "Warning: 'lsb_release' does not report compliance for $LSB_VERSION."
	echo "Some tests may fail just due to this fact."
fi

# From now on, we need root access.
if [ "$UID" -ne "0" ] ; then
	echo
	echo "Error: This script must be run as the root user."
	exit 1
fi

#############################################################################
# Downloading and installing a few essential packages
#############################################################################

echo "Downloading extra packages (if not already here):"

# Remote directory to download the packages from.
REPOSITORY="ftp://ftp.linux-foundation.org/pub/lsb/repositories/yum/lsb-$LSB_VERSION/repo-$ARCH"

echo "Using URL: $REPOSITORY"

function download_package() {
	echo -n "Looking for $2... "
	ls -1 $LOCAL_PKG_DIR/$2 >/dev/null 2>&1
	if [ "$?" -eq "0" ] ; then
		echo "already present"
	else
		echo "downloading"
		$WGET -N --retr-symlinks "$REPOSITORY/$1$2" -P "$LOCAL_PKG_DIR"
		if [ "$?" -ne "0" ] ; then
			echo
			echo "Warning: Download failed (maybe the file locations"
			echo "on the server changed?), will try extra local packages"
			if [ -e "$LSB_DIR/$2" ] ; then
				mkdir -p "$LOCAL_PKG_DIR"
				cp "$LSB_DIR/$2" "$LOCAL_PKG_DIR/"
			else
				echo
				echo "Error: Extra packages are not available"
				exit 1
			fi
		fi
	fi
}

download_package "" "lsb-setup-*.noarch.rpm"
download_package "" "lsb-dist-checker-*.$RPMEXT"
download_package "" "lsb-xvfb-*.$RPMEXT"

echo "Installing extra packages (if not already installed):"

function install_package() {
	echo -n "Looking for $1... "
	CURVERSION=`$RPM -q "$1"`
	if [ "$?" -eq "0" ] ; then
		echo "installed, will update if needed"
		$RPM -F "$LOCAL_PKG_DIR/$1$2" >/dev/null
		if [ "$?" -ne "0" ] ; then
			echo
			echo "Error: could not update the existing package."
			exit 1
		fi
	else
		echo "installing"
		$RPM -i "$LOCAL_PKG_DIR/$1$2" >/dev/null
		if [ "$?" -ne "0" ] ; then
			echo
			echo "Error: package installation failed."
			exit 1
		fi
	fi
}

install_package "lsb-setup" "*.noarch.rpm"
install_package "lsb-xvfb" "*.$RPMEXT"
install_package "lsb-dist-checker" "*.$RPMEXT"

mkdir -p /var/log/qa/lsb >/dev/null 2>&1

exit 0	# REMOVE ME!

#############################################################################
# Here we really run the test suite
#############################################################################

echo "Starting the test suite (this may need multiple hours)."

TESTRUN_DIR="qa_lsb-`date +%Y-%m-%d-%Hh-%Mm-%Ss`"

TERM=linux /opt/lsb/test/manager/utils/dist-checker.pl --testrun-id $TESTRUN_DIR -D -s "LSB $LSB_VERSION" $TEST_LIST

echo "Test suite finished (exit code $?)."

#############################################################################
# Copy the results to the log directory
#############################################################################

echo "Collecting results (will be in /var/log/qa/lsb)."

cp -R "/var/opt/lsb/test/manager/results/$TESTRUN_DIR" /var/log/qa/lsb
if [ "$?" -ne "0" ] ; then
	echo
	echo "Error: Could not copy the results to /var/log/qa/lsb."
	echo "Please check!"
	exit 1
fi

echo "Cleaning up."

# Clean up the results directory produced by the LSB run:
# - the .tar.gz archive of the whole directory is redundant,
#   we archive it separately
# - logs that are not directly used are gzipped
# 
rm /var/log/qa/lsb/$TESTRUN_DIR/*.tgz
gzip /var/log/qa/lsb/$TESTRUN_DIR/report.htm
gzip /var/log/qa/lsb/$TESTRUN_DIR/log
gzip /var/log/qa/lsb/$TESTRUN_DIR/verbose_log
gzip /var/log/qa/lsb/$TESTRUN_DIR/results/*.part1
gzip /var/log/qa/lsb/$TESTRUN_DIR/results/*.part2

echo "Completed."


