#!/bin/sh

CTCS2_DIR=/usr/lib/ctcs2
TCF_DIR=/usr/share/qa/tcf

NR_CPU=$(grep -c '^processor' /proc/cpuinfo)
MEM_SIZE=$(grep 'MemTotal:' /proc/meminfo | awk '{print $2}')

MEM_SIZE_DOUBLE=$((${MEM_SIZE} * 2))
MEM_1GiB=$((1024 * 1024))
MEM_SIZE_DOUBLE_MOD=$((${MEM_SIZE_DOUBLE} % ${MEM_1GiB}))
if test ${MEM_SIZE_DOUBLE_MOD} -ne 0;then
    MEM_SIZE_DOUBLE_GiB=$((${MEM_SIZE_DOUBLE} / ${MEM_1GiB}))
    let MEM_SIZE_DOUBLE_GiB++
    if [ ${MEM_SIZE_DOUBLE_GiB} -gt 16 ] && [ ${MEM_SIZE_DOUBLE_GiB} -le 32 ];    then
        MEM_SIZE_DOUBLE_GiB=32
    elif [ ${MEM_SIZE_DOUBLE_GiB} -gt 8 ] && [ ${MEM_SIZE_DOUBLE_GiB} -le 16 ]; then
        MEM_SIZE_DOUBLE_GiB=16
    elif [ ${MEM_SIZE_DOUBLE_GiB} -gt 4 ] && [ ${MEM_SIZE_DOUBLE_GiB} -le 8 ]; then
        MEM_SIZE_DOUBLE_GiB=8
    elif [ ${MEM_SIZE_DOUBLE_GiB} -gt 2 ] && [ ${MEM_SIZE_DOUBLE_GiB} -le 4 ]; then
        MEM_SIZE_DOUBLE_GiB=4
    elif [ ${MEM_SIZE_DOUBLE_GiB} -gt 1 ] && [ ${MEM_SIZE_DOUBLE_GiB} -le 2 ]; then
        MEM_SIZE_DOUBLE_GiB=2
    fi
    MEM_SIZE_DOUBLE=$((${MEM_SIZE_DOUBLE_GiB} * ${MEM_1GiB}))
fi

ABUILD_FS=$(grep '/abuild' /proc/mounts  | awk '{print $3}')
case ${ABUILD_FS} in
    "")
        mkdir -p /abuild
        ABUILD_FS="root"
        ;;
    *)
        echo "[tiobench_doublemem_async] The filesystem on /abuild is ${ABUILD_FS}"
        ;;
esac

TCF_FILE="${TCF_DIR}/qa_tiobench_async_${ABUILD_FS}.tcf"
echo > ${TCF_FILE}
for block in 4096 32768; do
    for num in 1 2 4;do
        NR_THREAD=$((${NR_CPU} * ${num}))
        # FILE_SIZE for tiobench.pl is the sum of size of files for each thread
        FILE_SIZE=$((${MEM_SIZE_DOUBLE} / 1024)) #in MiB
        cat <<EOF >> ${TCF_FILE}
fg 1 tiobench-doublemem-async tiobench.pl --size ${FILE_SIZE} --block ${block} --threads ${NR_THREAD} --dir /abuild
EOF
    done
done

echo 'wait' >> ${TCF_FILE}
$CTCS2_DIR/tools/run ${TCF_FILE}
