#! /bin/sh
# Copyright (c) 1996 - 2001 SuSE GmbH Nuernberg, Germany.  All rights reserved.
#
# Author: Florian La Roche <florian@suse.de>, 1996
#         Werner Fink <werner@suse.de>, 1996,98
#         Burchard Steinbild <bs@suse.de>, 1997
#         Thorsten Kukuk <kukuk@suse.de>, 2000,01
#
# /etc/init.d/nfsserver
#
### BEGIN INIT INFO
# Provides: nfsserver
# Required-Start: $network $remote_fs $named portmap ypbind
# Required-Stop: $network portmap
# Default-Start: 3 5
# Default-Stop: 0 1 2 6
# Description: Start the kernel based NFS daemon
### END INIT INFO

. /etc/rc.config
. /etc/sysconfig/nfs

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     ditto but be verbose in local rc status
#      rc_status -v -r  ditto and clear the local rc status
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num><num>
#      rc_reset         clear local rc status (overall remains)
#      rc_exit          exit appropriate to overall rc status
. /etc/rc.status

# First reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0 - success
# 1 - generic or unspecified error
# 2 - invalid or excess argument(s)
# 3 - unimplemented feature (e.g. "reload")
# 4 - insufficient privilege
# 5 - program is not installed
# 6 - program is not configured
# 7 - program is not running
# 
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signalling is not supported) are
# considered a success.

case `uname -r` in
    0.*|1.*|2.0.*) exit 3
esac

case "$1" in
    start)
      PARAMS=3
      test "$USE_KERNEL_NFSD_NUMBER" -gt 0 && PARAMS="$USE_KERNEL_NFSD_NUMBER"

      echo -n "Starting kernel based NFS server"
      if [ "`kernelversion`" == "2.2" ] ; then
        checkproc -n lockd || /sbin/rpc.lockd 
      fi
      checkproc /sbin/rpc.statd || startproc /sbin/rpc.statd
      rc_status
      /usr/sbin/exportfs -r 
      rc_status
      /usr/sbin/rpc.nfsd $PARAMS
      rc_status
      startproc /usr/sbin/rpc.mountd
      rc_status -v
      ;;
    stop)
      echo -n "Shutting down kernel based NFS server"
      /usr/sbin/exportfs -au
      killproc -n -KILL nfsd 
      rc_status
      killproc    -TERM /usr/sbin/rpc.mountd
      rc_status -v
      killproc -n -KILL lockd
      killproc    -TERM /sbin/rpc.statd
      ;;
    try-restart)
        ## Stop the service and if this succeeds (i.e. the 
        ## service was running before), start it again.
        $0 status >/dev/null &&  $0 restart

        # Remember status and be quiet
        rc_status
        ;;
    restart)
        ## Stop the service and regardless of whether it was
        ## running or not, start it again.
        $0 stop
        $0 start

        # Remember status and be quiet
        rc_status
        ;;
    force-reload)
        echo -n "Reload kernel based NFS server"
        ## if it supports it:
        killproc -HUP /usr/sbin/rpc.mountd
        killproc -HUP /usr/sbin/rpc.nfsd
        #touch /var/run/FOO.pid
        rc_status -v
	;;
    reload)
	echo -n "Reload kernel based NFS server"
	/usr/sbin/exportfs -r
	rc_status -v
	;;
    status)
        echo -n "Checking for kernel based NFS server: "
        ## Check status with checkproc(8), if process is running
        ## checkproc will return with exit status 0.

        # Status has a slightly different for the status command:
        # 0 - service running
        # 1 - service dead, but /var/run/  pid  file exists
        # 2 - service dead, but /var/lock/ lock file exists
        # 3 - service not running

        # NOTE: checkproc returns LSB compliant status values.
        checkproc /sbin/rpc.statd
	rc_status
        checkproc /usr/sbin/rpc.mountd
	rc_status
        checkproc -n nfsd
        rc_status -v
        ;;
    *)
	echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload}"
	exit 1
	;;
esac

rc_exit
