From 61c5f11594bf13e1cc9786106af9155c7839be32 Mon Sep 17 00:00:00 2001
From: Cyril Hrubis <chrubis@suse.cz>
Date: Tue, 25 Mar 2014 16:48:13 +0100
Subject: [PATCH] openposix: Fix shm_open, shm_unlink ENAMETOOLONG

The ENAMETOOLONG was changed to may fail (was previously shall fail) in
latest POSIX (since 2008). So ENAMETOOLONG is no longer required error
and since glibc commit (included since glibc 2.19) these testcases
started to fail.

commit 5d30d853295a5fe04cad22fdf649c5e0da6ded8c
Author: Ondrej Bilka <neleai@seznam.cz>
Date:   Thu Oct 31 13:58:01 2013 +0100

    Restrict shm_open and shm_unlink to SHMDIR. Fixes bugs 14752 and 15763.

This fix changes the testcases to return UNTESTED if the POSIX version
is decleared newer than 2008 and the call has failed with different
error than ENAMETOOLONG.

Signed-off-by: Cyril Hrubis <chrubis@suse.cz>
---
 .../open_posix_testsuite/conformance/interfaces/shm_open/39-1.c  | 9 +++++++--
 .../open_posix_testsuite/conformance/interfaces/shm_open/39-2.c  | 9 +++++++--
 .../conformance/interfaces/shm_unlink/10-1.c                     | 9 +++++++--
 .../conformance/interfaces/shm_unlink/10-2.c                     | 9 +++++++--
 4 files changed, 28 insertions(+), 8 deletions(-)

diff --git a/testcases/open_posix_testsuite/conformance/interfaces/shm_open/39-1.c b/testcases/open_posix_testsuite/conformance/interfaces/shm_open/39-1.c
index 6f58299..6065b31 100644
--- a/testcases/open_posix_testsuite/conformance/interfaces/shm_open/39-1.c
+++ b/testcases/open_posix_testsuite/conformance/interfaces/shm_open/39-1.c
@@ -45,11 +45,16 @@ int main(void)
 		printf("Test PASSED\n");
 		return PTS_PASS;
 	} else if (fd != -1) {
-		printf("shm_open() success.\n");
+		printf("FAILED: shm_open() succeeded\n");
 		shm_unlink(shm_name);
 		return PTS_FAIL;
 	}
 
-	perror("shm_open");
+	if (sysconf(_SC_VERSION) >= 200800L) {
+		printf("UNTESTED: shm_open() did not fail with ENAMETOLONG\n");
+		return PTS_UNTESTED;
+	}
+
+	perror("FAILED: shm_open");
 	return PTS_FAIL;
 }
diff --git a/testcases/open_posix_testsuite/conformance/interfaces/shm_open/39-2.c b/testcases/open_posix_testsuite/conformance/interfaces/shm_open/39-2.c
index 79cfd21..5a5a344 100644
--- a/testcases/open_posix_testsuite/conformance/interfaces/shm_open/39-2.c
+++ b/testcases/open_posix_testsuite/conformance/interfaces/shm_open/39-2.c
@@ -49,11 +49,16 @@ int main(void)
 		printf("Test PASSED\n");
 		return PTS_PASS;
 	} else if (fd != -1) {
-		printf("shm_open() success.\n");
+		printf("FAILED: shm_open() succeeded.\n");
 		shm_unlink(shm_name);
 		return PTS_FAIL;
 	}
 
-	perror("shm_open");
+	if (sysconf(_SC_VERSION) >= 200800L) {
+		printf("UNTESTED: shm_open() did not fail with ENAMETOLONG\n");
+		return PTS_UNTESTED;
+	}
+
+	perror("FAILED: shm_open");
 	return PTS_FAIL;
 }
diff --git a/testcases/open_posix_testsuite/conformance/interfaces/shm_unlink/10-1.c b/testcases/open_posix_testsuite/conformance/interfaces/shm_unlink/10-1.c
index 8b51ded..bcfa42c 100644
--- a/testcases/open_posix_testsuite/conformance/interfaces/shm_unlink/10-1.c
+++ b/testcases/open_posix_testsuite/conformance/interfaces/shm_unlink/10-1.c
@@ -40,10 +40,15 @@ int main(void)
 		printf("Test PASSED\n");
 		return PTS_PASS;
 	} else if (result != -1) {
-		printf("shm_unlink() success.\n");
+		printf("FAILED: shm_unlink() succeeded\n");
 		return PTS_FAIL;
 	}
 
-	perror("shm_unlink does not set the right errno");
+	if (sysconf(_SC_VERSION) >= 200800L) {
+		printf("UNTESTED: shm_open() did not fail with ENAMETOLONG\n");
+		return PTS_UNTESTED;
+	}
+
+	perror("FAILED: shm_unlink");
 	return PTS_FAIL;
 }
diff --git a/testcases/open_posix_testsuite/conformance/interfaces/shm_unlink/10-2.c b/testcases/open_posix_testsuite/conformance/interfaces/shm_unlink/10-2.c
index 4426108..7d478c7 100644
--- a/testcases/open_posix_testsuite/conformance/interfaces/shm_unlink/10-2.c
+++ b/testcases/open_posix_testsuite/conformance/interfaces/shm_unlink/10-2.c
@@ -49,10 +49,15 @@ int main(void)
 		printf("Test PASSED\n");
 		return PTS_PASS;
 	} else if (result != -1) {
-		printf("shm_unlink() success.\n");
+		printf("FAILED: shm_unlink() succeeded.\n");
 		return PTS_FAIL;
 	}
 
-	perror("shm_unlink");
+	if (sysconf(_SC_VERSION) >= 200800L) {
+		printf("UNTESTED: shm_open() did not fail with ENAMETOLONG\n");
+		return PTS_UNTESTED;
+	}
+
+	perror("FAILED: shm_unlink");
 	return PTS_FAIL;
 }
-- 
1.8.3.2

