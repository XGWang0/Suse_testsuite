Lmbench in ctcs testing framework readme.

Packages: lmbench, lmbench-ctcs-glue

/usr/lib/ctcs2/tools/lmbench-run - runs the benchmark

In general, it measures two key features: latency and bandwidth.

Bandwidth measurements:
* Pipe - Time data movement through pipes. Creates a Unix pipe between two processes and moves 10MB through the pipe in 64KB. chunks.
* AF UNIX - Creates a pipe and forks a child process which keeps writing data to the pipe as fast as it can. The benchmark measures how fast the parent process can read the data from the pipe. Nothing is done with the data.
* TCP - Moves data over a TCP/IP socket. Nothing is done with the data on either side.
* File reread - 
* Mmap reread -
* Bcopy (libc) - Allocates twice the specified amount of memory, zeros it, and then times the copying of the first half to the second half. Measures how fast the system can bcopy data.
* Bcopy (hand) - Allocates twice the specified amount of memory, zeros it, and then times the copying of the first half to the second half. Measures the time to copy data from one location to another. It does an array copy: dest[i] = source[i].
* Mem read - Measures the time to read data into the processor. It computes the sum of an array of integer values.
* Mem write - Measures the time to write data to memory. It assigns a constant value to each memory of an array of integer values.

Latency measurements:
* null call - Measures how long it takes to do getppid(). We chose getppid() because in all UNIX variants we are aware of, it requires a round-trip to/from kernel space and the actual work required inside the kernel is small and bounded.
* null I/O - Times how long it takes to write one byte to /dev/null.
* stat - Measures how long it takes to stat() a file whose inode is already cached.
* open close - Measures how long it takes to open() and then close() a file.
* select TCP - Measures the time to do a select on n file descriptors.
* sig instal - Measures the time to install signals. Uses POSIX sigaction interface. 
* sig handle - Measures the time to catch signals. 
* fork proc - Process fork+exit. Split a process into two (nearly) identical copies and have one exit.
* exec proc - Process fork+execve. Create a new process and have that new process run a new program.
* sh proc - Process fork+/bin/sh -c. Create a new process and have that new process run a new program by asking the system shell to find that program and run it.
* ctxsw - Measures context switching time for any reasonable number of processes of any reasonable size. The processes are connected in a ring of Unix pipes. Each process reads a token from its pipe, possibly does some work, and then writes the token to the next process. mProcesses may vary in size. A size of zero is the baseline process that does nothing except pass the token on to the next process. A process size of greater than zero means that the process does some work before passing on the token. The work is simulated as the summing up of an array of the specified size. The summing is an unrolled loop of about a 2.7 thousand instructions.
* Pipe - Uses two processes communicating through a Unix pipe to measure interprocess communication latencies. The benchmark passes a token back and forth between the two processes. No other work is done in the processes. The reported time is per round trip and includes the total time, i.e., the context switching overhead is includeded.
* AF UNIX - Measures interprocess communication latency via UNIX sockets. The benchmark passes a message back and forth between the two processes. No other work is done in the processes.
* UDP - Measures interprocess communication latency via UDP/IP. The benchmark passes a message back and forth between the two processes. No other work is done in the processes.
* RPC/UDP - Measures interprocess communication latency via Sun RPC using UDP sockets. The benchmark passes a message back and forth between the two processes. No other work is done in the processes.
* TCP - Measures interprocess communication latency via TCP/IP. The benchmark passes a message back and forth between the two processes. No other work is done in the processes.
* RPC/TCP - Measures interprocess communication latency via Sun RPC using TCP sockets. The benchmark passes a message back and forth between the two processes. No other work is done in the processes.
* TCP connection cost - The benchmark times the creation and connection of an AF_INET (aka TCP/IP) socket to a server (=localhost). Care is take that the connection time does not include any other overhead than the connection establishment itself.
* OK File create - Create number (500) of 0K files, measure duration.
* OK File delete - Delete number (500) of 0K files, measure duration.
* 1OK File create - Create number (500) of 10K files, measure duration.
* 1OK File delete - Delete number (500) of 10K files, measure duration.
* Mmap latency - Times how fast a mapping can be made and unmade. The benchmark maps in and unmaps the first 512, 1k, 2k, ... 2m bytes of the file repeatedly and reports the average time for one mapping/unmapping.
* Protection fault - Measures the time to catch a protection fault.
* Page fault - Measures the cost of pagefaulting pages from a file. Times how fast a page of a file can be faulted in. The file is flushed from (local) memory by using the msync() interface with the invalidate flag set.

QADB import: One value for every test in usec or MB/s and 8 values for ctxw test.