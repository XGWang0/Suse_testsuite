--- slepos_lib.sh.orig2	2009-11-11 16:21:09.000000000 +0100
+++ slepos_lib.sh	2009-11-16 16:34:53.000000000 +0100
@@ -720,18 +720,17 @@
 		COMMAND="posInitLdap.sh"
 	fi
 
-	# fix non-interactivity of the script
-	fix_posReadPassword
-
-	{
-		echo "${organization}"
-		echo "${country}"
-		echo "${pass}" 
-		echo "${pass}"
-		echo "${ssl}"
-		# "THIS WILL DELETE ALL DATA IN THE LDAP DATABASE!" - press Enter
-		echo ""
-	} | $COMMAND
+	expect - << EOT
+spawn ${COMMAND}
+expect "company name*:" { send "${organization}\r" } timeout { send_user "\n'company name' not asked\n\n" }
+expect "2 letter abbreviation*:"  { send "${country}\r" } timeout { send_user "\n'country' not asked\n\n" }
+expect "LDAP adminstrator password*:" { send "${pass}\r" } timeout { send_user "\n'LDAP adminstrator password' not asked\n\n" }
+expect "password again*:" { send "${pass}\r" } timeout { send_user "\n'password again' not asked\n\n" }
+expect "Enable secure connection" { send "${ssl}\r" } timeout { send_user "\n'Enable secure connection' not asked\n\n" }
+expect "Continue with configuration" { send "\r" } timeout { send_user "\n'Continue with configuration' not asked\n\n" }
+# try to return the original exit code, or 100 on timeout
+expect eof { exit [ lindex [ wait ] 3 ] } timeout { exit 100 }
+EOT
 	do_base_check
 }
 
@@ -804,7 +803,6 @@
 	else
 		COMMAND="posInitBranchserver.sh"
 	fi
-	fix_posReadPassword
 	(
 		source "$BRANCH_SERVER_CONFIG"
 		if ! which posInitBranchserver.sh &> /dev/null; then
@@ -813,23 +811,29 @@
 		fi
 		if [ $pos_version = 11 ]; then
 			{
-				# 1 = online, 2 = offline - only if admin server and branch server differs
-				[ -z "$on_admin" ] && echo "1"
-				echo "${organization}"
-				echo "${country}"
-				echo "${organizationalUnit}"
-				echo "${scLocation}"
-				echo "${LdapServer}"
-				echo "${userPassword}"
-				# run LDAP on localhost?
-				echo "Y"
-				if [ "$ssl"x = yx ]; then
-					echo "Y"
-				fi
-				echo "${internal_ip}"
-				# are you sure to do that?
-				echo "Y"
-			} | $COMMAND --reinitialize || { error "run_posInitBranchserver failed"; return 1; }
+				expect - << EOT
+
+spawn ${COMMAND} --reinitialize
+
+if { "$on_admin" == "" } {
+	expect "1 = Online*select initialization mode:" { send "1\r" } timeout { send_user "\n'initialization mode' not asked\n\n" }
+}
+expect "company name*:" { send "${organization}\r" } timeout { send_user "\n'company name' not asked\n\n" }
+expect "2 letter abbreviation*:"  { send "${country}\r" } timeout { send_user "\n'country' not asked\n\n" }
+expect "name of organizational unit*:" { send "${organizationalUnit}\r" } timeout { send_user "\n'organizational unit' not asked\n\n" }
+expect "branch name*:" { send "${scLocation}\r" } timeout { send_user "\n'branch name' not asked\n\n" }
+expect "name or IP of the AdminServer*:" { send "${LdapServer}\r" } timeout { send_user "\n'name or IP of the AdminServer' not asked\n\n" }
+expect "Branch Server access password:" { send "${userPassword}\r" } timeout { send_user "\n'Branch Server access password' not asked\n\n" }
+expect "Use Branch LDAP on localhost" { send "Y\r" } timeout { send_user "\n'Use Branch LDAP on localhost' not asked\n\n" }
+if { "$ssl" == "y" } {
+	expect "Enable secure connection" { send "${ssl}\r" } timeout { send_user "\n'Enable secure connection' not asked\n\n" }
+}
+expect "Continue with configuration" { send "\r" } timeout { send_user "\n'Continue with configuration' not asked\n\n" }
+# try to return the original exit code, or 100 on timeout
+expect eof { exit [ lindex [ wait ] 3 ] } timeout { exit 100 }
+
+EOT
+			} || { error "run_posInitBranchserver failed"; return 1; }
 		elif [ $pos_version = 10 ]; then
 			{
 				echo "${organization}"
@@ -864,21 +868,6 @@
 # Non-LDAP stuff
 ########
 
-fix_posReadPassword() {
-	is_help_requested "$@" && { handle_help "$FUNCNAME" ; return 0 ; }
-	##### this will replace implementation of '/usr/lib/SLEPOS/posReadPassword.pl' to something less aggressive to stdin #####
-	case $pos_version in
-		9|10)	POSREADPASSWORD=/usr/sbin/posReadPassword.pl ;;
-		11)	POSREADPASSWORD=/usr/lib/SLEPOS/posReadPassword.pl ;;
-	esac
-	cat << EOB > "$POSREADPASSWORD" && chmod +x "$POSREADPASSWORD" || die_internal "An error occured during replacing /usr/lib/SLEPOS/posReadPassword.pl - slepos_lib.sh error"
-#!/bin/sh
-read pass
-echo -n "\$pass"
-EOB
-}
-
-
 show_log_on_fail() {
 	is_help_requested "$@" && { handle_help "$FUNCNAME" ; return 0 ; }
 
