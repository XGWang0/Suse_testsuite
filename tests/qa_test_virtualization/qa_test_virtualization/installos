#!/bin/bash
# ****************************************************************************
# Copyright (c) 2013 Unpublished Work of SUSE. All Rights Reserved.
# 
# THIS IS AN UNPUBLISHED WORK OF SUSE.  IT CONTAINS SUSE'S
# CONFIDENTIAL, PROPRIETARY, AND TRADE SECRET INFORMATION.  SUSE
# RESTRICTS THIS WORK TO SUSE EMPLOYEES WHO NEED THE WORK TO PERFORM
# THEIR ASSIGNMENTS AND TO THIRD PARTIES AUTHORIZED BY SUSE IN WRITING.
# THIS WORK IS SUBJECT TO U.S. AND INTERNATIONAL COPYRIGHT LAWS AND
# TREATIES. IT MAY NOT BE USED, COPIED, DISTRIBUTED, DISCLOSED, ADAPTED,
# PERFORMED, DISPLAYED, COLLECTED, COMPILED, OR LINKED WITHOUT SUSE'S
# PRIOR WRITTEN CONSENT. USE OR EXPLOITATION OF THIS WORK WITHOUT
# AUTHORIZATION COULD SUBJECT THE PERPETRATOR TO CRIMINAL AND  CIVIL
# LIABILITY.
# 
# SUSE PROVIDES THE WORK 'AS IS,' WITHOUT ANY EXPRESS OR IMPLIED
# WARRANTY, INCLUDING WITHOUT THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT. SUSE, THE
# AUTHORS OF THE WORK, AND THE OWNERS OF COPYRIGHT IN THE WORK ARE NOT
# LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR IN CONNECTION
# WITH THE WORK OR THE USE OR OTHER DEALINGS IN THE WORK.
# ****************************************************************************
#


export LANG=C

source /usr/share/qa/qa_internalapi/sh/libqainternal.lib.sh

# Possible values: 'standalone' or 'network', the standalone being
# default
if [ $# -ne 2 ]; then
	echo "require 2 argument"
	exit $ERROR
fi
TEST_TYPE=$1

# Format: os-rel-sp-arch-vtype-scenario-method
DEFINITION=$2

TEST_ROOT="/usr/share/qa/qa_test_virtualization"

if [ ! -r "$TEST_ROOT/shared/$TEST_TYPE" ] ; then
	echo "Not a test type '$TEST_TYPE'."
	exit $ERROR
fi


# Gather parts of the definition into array for easier
# handling. Script name is preferred before the definition.
OIFS=$IFS
IFS="-"
A_DEFINITION=(${DEFINITION})
IFS=$OIFS
unset OIFS

# These variables are derived from the installation script name. If
# they are not available from the name, default values from definition
# above are used.
# These values must be known before source shared/$TEST_TYPE
OPERATING_SYSTEM=${A_DEFINITION[0]}
RELEASE=${A_DEFINITION[1]}
SERVICE_PACK=${A_DEFINITION[2]}
ARCHITECTURE=${A_DEFINITION[3]}
VIRT_TYPE=${A_DEFINITION[4]}
SCENARIO=${A_DEFINITION[5]}
INSTALL_METHOD=${A_DEFINITION[6]}

# Before this line, script parameters have to be collected
source "$TEST_ROOT/shared/$TEST_TYPE"

# test_init not overloaded
# test_cleanup not overloaded

function test_action
{
	SETTINGS=""
	if [ "$TEST_TYPE" != "network" ] ; then
		# standalone
		SETTINGS="-P $TEST_ROOT/loc/settings.$TEST_TYPE"
		echo "Using settings file $TEST_ROOT/loc/settings.$TEST_TYPE..."
	else
		echo "Using default configuration for virtautolib for settings file" >&2
	fi

	SPECIAL_ARGS=""
	if [ "$OPERATING_SYSTEM" == "sled" ] ; then
		# SLED needs more space than the default disk size.
		# This might break if some other argumetns are specified (so if added new features, this should be checked)
		SPECIAL_ARGS="$SPECIAL_ARGS -d 8192"
	fi
        if [ "$OPERATING_SYSTEM" == "rhel" -a "$RELEASE" == "7" ] ; then
                # RHEL 7 requires 1024 MB of memory.
                SPECIAL_ARGS="$SPECIAL_ARGS -e 1024"
        fi

	/usr/share/qa/virtautolib/lib/vm-install.sh -y $IP -b $BR $SETTINGS -C $SPECIAL_ARGS -o $OPERATING_SYSTEM -r $RELEASE -p $SERVICE_PACK -c $ARCHITECTURE -t $VIRT_TYPE -n $SCENARIO -m $INSTALL_METHOD
}

run_test

