#!/bin/bash
# ****************************************************************************
# Copyright (c) 2013 Unpublished Work of SUSE. All Rights Reserved.
# 
# THIS IS AN UNPUBLISHED WORK OF SUSE.  IT CONTAINS SUSE'S
# CONFIDENTIAL, PROPRIETARY, AND TRADE SECRET INFORMATION.  SUSE
# RESTRICTS THIS WORK TO SUSE EMPLOYEES WHO NEED THE WORK TO PERFORM
# THEIR ASSIGNMENTS AND TO THIRD PARTIES AUTHORIZED BY SUSE IN WRITING.
# THIS WORK IS SUBJECT TO U.S. AND INTERNATIONAL COPYRIGHT LAWS AND
# TREATIES. IT MAY NOT BE USED, COPIED, DISTRIBUTED, DISCLOSED, ADAPTED,
# PERFORMED, DISPLAYED, COLLECTED, COMPILED, OR LINKED WITHOUT SUSE'S
# PRIOR WRITTEN CONSENT. USE OR EXPLOITATION OF THIS WORK WITHOUT
# AUTHORIZATION COULD SUBJECT THE PERPETRATOR TO CRIMINAL AND  CIVIL
# LIABILITY.
# 
# SUSE PROVIDES THE WORK 'AS IS,' WITHOUT ANY EXPRESS OR IMPLIED
# WARRANTY, INCLUDING WITHOUT THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT. SUSE, THE
# AUTHORS OF THE WORK, AND THE OWNERS OF COPYRIGHT IN THE WORK ARE NOT
# LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR IN CONNECTION
# WITH THE WORK OR THE USE OR OTHER DEALINGS IN THE WORK.
# ****************************************************************************
#


export LANG=C

source /usr/share/qa/qa_internalapi/sh/libqainternal.lib.sh

#
# Warning, changing values below may require to change also some scripts in netinfo directory!
# 

LOCATION="`/usr/share/qa/tools/location.pl | awk '{ print $NF; }'`"
BR='br123'
IP='192.168.123.1'
NET='192.168.123.0'
MASK='255.255.255.0'
NETREV='123.168.192'
NET_DHCP_RANGE_START='192.168.123.10'
NET_DHCP_RANGE_END='192.168.123.100'
NET_STATIC_RANGE_START='192.168.123.101'
NET_STATIC_RANGE_END='192.168.123.115'
TESTUSER="virt-test"
TESTUSER_PASSWD="virt-pass-159"
TEST_ROOT="/usr/share/qa/qa_test_virtualization"

DEFAULT_IF="`route | grep ^default | awk {'print $NF'}`"

BACKUP="/tmp/virt_conf/"

mkdir $BACKUP 2>/dev/null

# add some file/dir to backup
function backup
{
	#list for later removal during restore
	echo -n "$1" >> "$BACKUP/LIST"
	echo -ne "\0" >> "$BACKUP/LIST"

	dir="`dirname "$1"`"
	if [ -e "$1" ] ; then 
		mkdir -p "$BACKUP/$dir"
		mv "$1" "$BACKUP/$dir"
	fi
}

function backup_copy
{
	backup "$1"
	cp -a "$BACKUP/$1" "$1"
}

function restore
{
	cat "$BACKUP/LIST" | xargs -0 rm -rf
	rm "$BACKUP/LIST"

	cp -a "$BACKUP"/* /
	rm -fr "$BACKUP"
}

function test_init
{
	#this can be overloaded in the test
	return 0
}

function test_cleanup
{
	#this can be overloaded in the test
	return 0
}


#
function setup_services
{
	failed=0
	#check improper cleanup from last time
	if ifconfig $BR > /dev/null 2>&1 ; then
		echo "Warning: Cannot create bridge $BR, network interface with same name already exist." >&2
		echo "Skip setup service."
		return
	fi
	if getent passwd $TESTUSER > /dev/null 2>&1 ; then
		echo "Error: Cannot create user $TESTUSER, user with same name already exist." >&2
		echo "       If it's a result of improper cleanup from last time, you can do:" >&2
		echo "           userdel -r $TESTUSER" >&2
	fi
	[ $failed -eq 0 ] || return 1 # already reported

	# setup bridge for the VM
	brctl addbr $BR
	brctl setfd $BR 0
	ifconfig $BR up $IP netmask $MASK

	# PXE (tftp)
	backup /tftpboot
	backup /etc/xinetd.d/tftp 
	mkdir -p -m 777 /tftpboot/pxelinux.cfg
	cat > /etc/xinetd.d/tftp << EOF 
# default: off
# description: tftp service is provided primarily for booting or when a \
#       router need an upgrade. Most sites run this only on machines acting as
#       "boot servers".
service tftp
{
        socket_type             = dgram
        protocol                = udp
        wait                    = yes
        user                    = root
        server                  = /usr/sbin/in.tftpd
        server_args             = -s /tftpboot
        disable                 = no
}

EOF

	cp /usr/share/syslinux/pxelinux.0 /tftpboot

	# DHCP
	backup /etc/sysconfig/dhcpd
	cat > /etc/sysconfig/dhcpd << EOF
DHCPD_INTERFACE="$BR"

DHCPD_RUN_CHROOTED="yes"

DHCPD_CONF_INCLUDE_FILES=""

DHCPD_RUN_AS="dhcpd"

DHCPD_OTHER_ARGS=""

DHCPD_BINARY=""

EOF

	backup /etc/dhcpd.conf 
	cat > /etc/dhcpd.conf << EOF
ddns-update-style interim;
subnet $NET netmask $MASK {
range $NET_DHCP_RANGE_START $NET_DHCP_RANGE_END;
default-lease-time 1800;
max-lease-time 4800;
next-server $IP;
filename "pxelinux.0";
option routers $IP;
option domain-name-servers $IP;
option subnet-mask $MASK;
option domain-name "testvirt.net";
}

EOF


# DNS
FORWARDERS=""
for i in `cat /etc/resolv.conf | grep ^nameserver | awk {'print $NF'}` ; do 
	FORWARDERS="$FORWARDERS $i;" 
done

sed -i "/forwarders {/s/.*/       forwarders { $FORWARDERS }/" /etc/named.conf

#	backup /etc/named.conf
#	cat > /etc/named.conf << EOF
#options {
#        directory "/var/lib/named";
#        dump-file "/var/log/named_dump.db";
#        statistics-file "/var/log/named.stats";
#        forwarders { $FORWARDERS };
#        listen-on-v6 { any; };
#        notify no;
#};
#
#zone "." in {
#        type hint;
#        file "root.hint";
#};
#
#zone "localhost" in {
#        type master;
#        file "localhost.zone";
#};
#
#zone "0.0.127.in-addr.arpa" in {
#        type master;
#        file "127.0.0.zone";
#};
#
#zone "testvirt.net" in {
#	type master;
#	file "testvirt.net.zone";
#};
#
#zone "$NETREV.in-addr.arpa" in {
#	type master;
#	file "$NETREV.in-addr.arpa.zone";
#};
#
## Include the meta include file generated by createNamedConfInclude.  This
## includes all files as configured in NAMED_CONF_INCLUDE_FILES from
## /etc/sysconfig/named
##include "/etc/named.conf.include";
#
#EOF
#
#	backup /var/lib/named/testvirt.net.zone
#	cat > /var/lib/named/testvirt.net.zone << EOF
#@ IN SOA `hostname -s`.testvirt.net. root@`hostname -s`.testvirt.net. (
#                        2006012103; serial
#                        28800; refresh, seconds
#                        7200; retry, seconds
#                        604800; expire, seconds
#                        86400 ); minimum, seconds
#;
#@ NS `hostname -s`.testvirt.net.;
#;
#`hostname -s`        A $IP
#
#EOF
#
#	backup /var/lib/named/$NETREV.in-addr.arpa.zone
#	cat > /var/lib/named/$NETREV.in-addr.arpa.zone << EOF
#@ IN SOA `hostname -s`.testvirt.net. root@`hostname -s`.testvirt.net. (
#                        2006012103; serial
#                        28800; refresh, seconds
#                        7200; retry, seconds
#                        604800; expire, seconds
#                        86400 ); minimum, seconds
#;
#@ NS `hostname -s`.testvirt.net.;
#;
#`echo $IP | awk -F. {'print $NF;'}`   PTR `hostname -s`.testvirt.net.
#
#EOF
#
#	ipstart="`echo $NET_DHCP_RANGE_START | awk -F. {'print $NF;'}`"
#	ipend="`echo $NET_DHCP_RANGE_END | awk -F. {'print $NF;'}`"
#	netbase="`echo $NET_DHCP_RANGE_START | sed 's/\.[0-9]\+$//'`"
#	for i in `seq $ipstart $ipend` ; do
#		echo "vm-$i A $netbase.$i" >> /var/lib/named/testvirt.net.zone
#		echo "$i PTR vm-$i.testvirt.net." >>  /var/lib/named/$NETREV.in-addr.arpa.zone
#	done
#	ipstart="`echo $NET_STATIC_RANGE_START | awk -F. {'print $NF;'}`"
#	ipend="`echo $NET_STATIC_RANGE_END | awk -F. {'print $NF;'}`"
#	netbase="`echo $NET_STATIC_RANGE_START | sed 's/\.[0-9]\+$//'`"
#	for i in `seq $ipstart $ipend` ; do
#		echo "vm-static-$i A $netbase.$i" >> /var/lib/named/testvirt.net.zone
#		echo "$i PTR vm-static-$i.testvirt.net." >>  /var/lib/named/$NETREV.in-addr.arpa.zone
#	done
#
#
#	# modify resolv.conf
#	cp /etc/resolv.conf /etc/resolv.conf
#	sed -i 's/^\(search .*\)$/\1 testvirt.net/' /etc/resolv.conf
#	grep -v '^nameserver ' /etc/resolv.conf > /etc/resolv.conf
#	rm /etc/resolv.conf
#	echo 'nameserver 127.0.0.1' >> /etc/resolv.conf

	# Web server for autoinst profiles
	#TODO configuration!!! (currently expecting default)
	#backup /etc/apache2
	backup /srv/www/htdocs
	#TODO reinstall apache2 or better - supply default config
	mkdir -p -m 777 /srv/www/htdocs/install/autoyast
	cat >  /srv/www/htdocs/index.html << EOF
<html>
<head>
<title>Virtualization automated test host</title>
</head>
<body>
<h1>Virtualization automated test host</h1>
<p> This host (`hostname`) is currently set up for running automated 
virtualization tests. The webserver part of the setup provides the 
installation profiles (autoyast files etc.) for the virtual machines.</p>
</body>
</html>
EOF

	# NAT - TODO, create more complete rules so it's not neccessary to disable firewall
	rcSuSEfirewall2 stop
	iptables-save > /tmp/iptables
	iptables --table nat --append POSTROUTING --out-interface $DEFAULT_IF -j MASQUERADE
	iptables --append FORWARD --in-interface $BR -j ACCEPT
	echo 1 > /proc/sys/net/ipv4/ip_forward

	# user for netinfo,pxe and http
	addUser $TESTUSER || echo "Can not create User:$TESTUSER ,The user maybe exist already"
	changePassword $TESTUSER $TESTUSER_PASSWD || return 1
	homedir=`getent passwd $TESTUSER | awk -F: '{ print $6; }'`
	mkdir -p "$homedir/bin"
	cp "$TEST_ROOT/netinfo"/* "$homedir/bin"
	chmod 755 "$homedir/bin"/*

	rcxinetd restart
	rcdhcpd restart
	rcnamed restart
	rcapache2 restart

	# make sure dhcp.leases is readable
	chmod +r /var/lib/dhcp/db/dhcpd.leases

	# location specific
	if [ -x "$TEST_ROOT/loc/prepare.$LOCATION" ] ; then
		"$TEST_ROOT/loc/prepare.$LOCATION" || return 11
	fi

	# testcase-specific
	test_init
}

function _test_init
{
	
	#setup services
	setup_services
	
	
	#download the kernel and initrd for pxe install
	
	if [ "$VIRT_TYPE" == "fv" ]
	then
		if [ "$INSTALL_METHOD" == "ftp" ] || [ "$INSTALL_METHOD" == "http" ] || [ "$INSTALL_METHOD" == "nfs" ] || [ "$INSTALL_METHOD" == "net" ]
		then
	
			pxe_os=OOPS
			pxe_rl="$RELEASE"
			pxe_sp="$SERVICE_PACK"
			if [ "$ARCHITECTURE" == "32" ] || [ "$ARCHITECTURE" == "32p" ] ; then
				arch="ix86"
			elif [ "$ARCHITECTURE" == "64" ] ; then
				arch="x86_64"
			fi
			if [ "$OPERATING_SYSTEM" == "sles" ] || [ "$OPERATING_SYSTEM" == "sled" ] || [ "$OPERATING_SYSTEM" == "oes" ] ; then
				pxe_os="$OPERATING_SYSTEM"
				os_type=suse
			elif [ "$OPERATING_SYSTEM" == "os" ] ; then
				pxe_os=opensuse
				os_type=suse
			elif [ "$OPERATING_SYSTEM" == "rhel" ]
			then
				pxe_os=rhel
				os_type=rhel
			fi
	
			if [ "$pxe_os" == "OOPS" ] ; then
				tmpError="PXE os --$pxe_os--, PXE RELEASE --$pxe_rl-- or PXE sp --$pxe_sp-- not set correctly"
				echo "ERROR - $tmpError"
				echo "ERROR - $tmpError" >&2
				echo "    ***** INSTALL ERRORED *****"
				popd > /dev/null; return 11
			fi
	
			# get initrd and kernel
			sr=`/usr/share/qa/virtautolib/lib/get-source.sh source.$INSTALL_METHOD.$OPERATING_SYSTEM-$RELEASE-$SERVICE_PACK-$ARCHITECTURE`
			if [ "$INSTALL_METHOD" == "nfs" -o "$INSTALL_METHOD" == "net" ] ; then
				# nfs not supported, trying ftp or http
				sr=`/usr/share/qa/virtautolib/lib/get-source.sh source.ftp.$OPERATING_SYSTEM-$RELEASE-$SERVICE_PACK-$ARCHITECTURE`
				[ "$sr" == "" ] && sr=`/usr/share/qa/virtautolib/lib/get-source.sh source.http.$OPERATING_SYSTEM-$RELEASE-$SERVICE_PACK-$ARCHITECTURE`
			fi
			if [ "$sr" == "" ] ; then
				tmpError="Unable to get ftp/http installation source for $OPERATING_SYSTEM-$RELEASE-$SERVICE_PACK-$ARCHITECTURE method: $INSTALL_METHOD."
	                        echo "ERROR - $tmpError"
	                        echo "ERROR - $tmpError" >&2
	                        echo "    ***** INSTALL SKIPPED *****"
	                        popd > /dev/null; return 22
			fi
			
			mkdir -p /tftpboot/qa-virtauto/$pxe_os/$pxe_rl/$pxe_sp/$arch
			cd /tftpboot/qa-virtauto/$pxe_os/$pxe_rl/$pxe_sp/$arch
	
			if ! /usr/share/qa/virtautolib/lib/download_pxe_bootfiles.sh -ik -a $arch -s "$sr" -o $os_type ; then
				tmpError="Unable to download initrd&kernel image from $sr."
				echo "ERROR - $tmpError"
				echo "ERROR - $tmpError" >&2
				echo "    ***** INSTALL ERRORED *****"
				popd > /dev/null; return 11
			fi
	
			cd - > /dev/null
		fi
	fi
	}


#
function _test_cleanup
{
	# testcase-specific
	test_cleanup
	res=$?

	if [ -x "$TEST_ROOT/loc/cleanup.$LOCATION" ] ; then
		"$TEST_ROOT/loc/cleanup.$LOCATION" || res=$?
	fi

	return $res


}

#run test itself
function run_test
{
	# Skip if source not defined
        sf="$TEST_ROOT/loc/sources.$LOCATION"
	[ -f "$sf" ] || sf=/usr/share/qa/virtautolib/data/settings.properties
	if [ "$INSTALL_METHOD" == 'net' ] ; then
		if ! /usr/share/qa/virtautolib/lib/get-source.sh source.ftp.$OPERATING_SYSTEM-$RELEASE-$SERVICE_PACK-$ARCHITECTURE > /dev/null 2> /dev/null \
			&& ! /usr/share/qa/virtautolib/lib/get-source.sh source.http.$OPERATING_SYSTEM-$RELEASE-$SERVICE_PACK-$ARCHITECTURE > /dev/null 2> /dev/null ; then
			printSkipped "Source: source.$INSTALL_METHOD.$OPERATING_SYSTEM-$RELEASE-$SERVICE_PACK-$ARCHITECTURE not defined in $sf." >&2
			exit $SKIPPED
		fi
	else
		if ! /usr/share/qa/virtautolib/lib/get-source.sh source.$INSTALL_METHOD.$OPERATING_SYSTEM-$RELEASE-$SERVICE_PACK-$ARCHITECTURE > /dev/null 2> /dev/null ; then
			printSkipped "Source: source.$INSTALL_METHOD.$OPERATING_SYSTEM-$RELEASE-$SERVICE_PACK-$ARCHITECTURE not defined in $sf." >&2
			exit $SKIPPED
		fi
	fi

	_test_init
	init_res=$?
	if [ $init_res -ne 0 ] ; then
		printError "Initialization failed, running cleanup - some errors might occur due to improper initialization."
		_test_cleanup
		[ $init_res -eq 22 ] || init_res=$ERROR
		exit $init_res
	fi

	#give services time to successfully load
	sleep 5

	test_action
	test_result=$?

	_test_cleanup
	if [ $? -ne 0 ] ; then
		printWarning "Cleanup failed - this might (but shouldn't) cause failure of next tests."
	fi

	[ $test_result -eq $PASSED ] && printPassed "Test passed"

	return $test_result
}

function interrupt
{
	
	trap '' SIGINT
	_test_cleanup
	
	printError "Test has been interrupted."

	trap - SIGINT
	exit $ERROR	
}

trap interrupt SIGINT

_test_init
init_res=$?
if [ $init_res -ne 0 ] ; then
	printError "Initialization failed, running cleanup - some errors might occur due to improper initialization."
	_test_cleanup
	[ $init_res -eq 22 ] || init_res=$ERROR
	exit $init_res
fi
